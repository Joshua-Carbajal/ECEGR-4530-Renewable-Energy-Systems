# Joshua Carbajal
# 4/25/2021
# Modeling Mini-Project Part 3
# Purpose: Basic Solar Array Power Output Calculator

import math

# Calculates day of year if not known by user
def dayCalculator(month, dayofMonth):
    if month.lower() == 'january':
        d = 0+dayofMonth
    elif month.lower() == 'february':
        d = 31+dayofMonth
    elif month.lower() == 'march':
        d = 59+dayofMonth
    elif month.lower() == 'april':
        d = 90+dayofMonth
    elif month.lower() == 'may':
        d = 120+dayofMonth
    elif month.lower() == 'june':
        d = 151+dayofMonth
    elif month.lower() == 'july':
        d = 181+dayofMonth
    elif month.lower() == 'august':
        d = 212+dayofMonth
    elif month.lower() == 'september':
        d = 243+dayofMonth
    elif month.lower() == 'october':
        d = 273+dayofMonth
    elif month.lower() == 'november':
        d = 304+dayofMonth
    else:
        d = 334+dayofMonth
    return d

#--------main-------
solarConstant = 1367
delta0 = 23.45
solarNoon = 12

# Ask user for input for various parameters
phi = input('location latitude: ')
phi = int(phi)
lambdaLong = input('location longitude: ')
lambdaLong = int(lambdaLong)
beta = input('PV array tilt: ')
beta = int(beta)
answer = input('Is the day of year known? (y/n): ')
if answer == 'y':
    dayOfYear = input('day of year: ')
    dayOfYear = int(dayOfYear)
else:
    month = input('Input month: ')
    dayofMonth = input('Input day of the month: ')
    dayofMonth = int(dayofMonth)
    dayOfYear = dayCalculator(month, dayofMonth)   
civilTime = input('civil time of day, in hours: ')
civilTime = int(civilTime)
timezoneUTC = input('time zone in reference to UTC: ')
timezoneUTC = int(timezoneUTC)
kT = input('clearness index: ')
kT = float(kT)
albedo = input('albedo: ')
albedo = float(albedo)
ambientT = input('ambient temperature(celsius): ')
ambientT = int(ambientT)
modNOCT = input('module NOCT(celsius): ')
modNOCT = float(modNOCT)
modPwrR = input('module power rating(W,STC): ')
modPwrR = float(modPwrR)
modVoc = input('module open-circuit voltage(V,STC): ')
modVoc = float(modVoc)
modIsc = input('module short-circuit current(A,STC): ')
modIsc = float(modIsc)
pwrCoeff = input('module power coefficient(%/C): ')
pwrCoeff = float(pwrCoeff)
vCoeff = input('module voltage coefficient(%/C): ')
vCoeff = float(vCoeff)
iCoeff = input('module current coefficient(%/C): ')
iCoeff = float(iCoeff)
numPVmodules = input('number of PV modules per string: ')
numPVmodules = int(numPVmodules)
numStrings = input('number of strings: ')
numStrings = int(numStrings)
print()

# Calculation for extraterrestrial irradiance on a plane normal
# to radiation
value = 1+0.033*math.cos(2*math.pi*((dayOfYear)/365))
irr_0n = solarConstant*value
print('Extraterrestrial irradiance on plane normal to sun, G_0n: {0:.2f} W/m^2 '.format(irr_0n))

# Calculation for effect of declination angle
delta = delta0*math.sin(math.radians((360*(284+dayOfYear)/365)))
print('Declination angle: {0:.2f} degrees'.format(delta))

# Calculation to determine correct longitude of the meridian defining
# the local time based on day of the year and day light savings time
if dayOfYear >= 73 and dayOfYear <= 311:
    lambdaZone =  (timezoneUTC-1)*15
else:
    lambdaZone = timezoneUTC*15
    
# Calculation for effect of hour angle
if civilTime == solarNoon:
    omega = 15*(civilTime-12)
else:
    omega = 15*(civilTime-12)+(lambdaLong-lambdaZone)
print('Hour angle: {:.0f} degrees'.format(omega))

# Calculation for zenith angle
if omega == 0:
    zenithAngle = phi-delta
else:
    zeta1 = math.sin(math.radians(delta))*math.sin(math.radians(phi))
    zeta2 = math.cos(math.radians(delta))*math.cos(math.radians(phi))*math.cos(math.radians(omega))
    zArcosine = math.acos(zeta1+zeta2)
    zenithAngle = math.degrees(zArcosine)
print('Zenith angle: {0:.2f} degrees'.format(zenithAngle))

# Calculation for angle of incidence based on components
val1 = math.sin(math.radians(delta))*math.sin(math.radians(phi))*math.cos(math.radians(beta))
val2 = math.sin(math.radians(delta))*math.cos(math.radians(phi))*math.sin(math.radians(beta))
val3 = math.cos(math.radians(delta))*math.cos(math.radians(phi))*math.cos(math.radians(beta))*math.cos(math.radians(omega))
val4 = math.cos(math.radians(delta))*math.sin(math.radians(phi))*math.sin(math.radians(beta))*math.cos(math.radians(omega))
theta = val1-val2+val3+val4
cosTheta = math.acos(theta)

# Calculation for angle of incidence
incidenceAngle = math.degrees(cosTheta)
print('Angle of incidence: {0:.2f} degrees'.format(incidenceAngle))

print('Cosine of the angle of incidence: {0:.2f}'.format(theta))

# Calculation for total irradiance on a surface
irr_0T = irr_0n*theta
print('Irradiance on the PV array ignoring the effects of the atmosphere, G_0T: {0:.2f} W/m^2'.format(irr_0T))

# Calculation for global horizontal irradiance
irr_GHI = kT*irr_0n*math.cos(math.radians(zenithAngle))
print('Global Horizontal Irradiance, G_GHI: {0:.2f} W/m^2'.format(irr_GHI))

# Calculation for beam and diffuse component of GHI
irr_Diffuse = (1-1.13*kT)*irr_GHI
irr_Beam = irr_GHI-irr_Diffuse
print('Beam component of GHI, G_b: {0:.2f} W/m^2'.format(irr_Beam))
print('Diffuse component of GHI, G_d: {0:.2f} W/m^2'.format(irr_Diffuse))

# Calculation for coefficient Rb
coeffRb = math.cos(math.radians(incidenceAngle))/math.cos(math.radians(zenithAngle))
print('Coefficient Rb: {0:.2f}'.format(coeffRb))

# Calculation for beam irradiance on tilted surface
irr_bt = irr_Beam*coeffRb
print('Beam irradiance on tilted surface, G_bT: {0:.2f} W/m^2'.format(irr_bt))

# Calculation for diffuse irradiance on tilted surface
irr_dt = 0.5*irr_Diffuse*(1+math.cos(math.radians(beta)))
print('Diffuse irradiance on tilted surface, G_dT: {0:.2f} W/m^2'.format(irr_dt))

# Calculation for ground reflected irradiance on the tilted surface
irr_gndT = 0.5*albedo*irr_GHI*(1-math.cos(math.radians(beta)))
print('Ground reflected irradiance on the tilted surface, G_gndT: {0:.2f} W/m^2'.format(irr_gndT))

# Calculation for total irradiance on the tilted surface
irr_Total = irr_bt+irr_dt+irr_gndT
print('Total irradiance on the tilted surface, G_T: {0:.2f} W/m^2'.format(irr_Total))

# Calculation for module temperature
modTemp = ambientT+((modNOCT-20)*(irr_Total/800))
print('Module temperature(celsius): {0:.2f} C'.format(modTemp))

# Calculation for array open-circuit voltage
val1 = 1+((vCoeff/100)*(modTemp-25))
singleModVoc = modVoc*val1
arrayVoc = numPVmodules*singleModVoc
print('Array open-circuit voltage(V): {0:.2f} V'.format(arrayVoc))

# Calculation for array short-circuit current
val2 = 1+((iCoeff/100)*(modTemp-25))
singleModIsc = modIsc*(irr_Total/1000)*val2
arrayIsc = numStrings*singleModIsc
print('Array short-circuit current(A): {0:.2f} A'.format(arrayIsc))

# Calculation for array maximum power
val3 = 1+((pwrCoeff/100)*(modTemp-25))
singleModPwr = modPwrR*(irr_Total/1000)*val3
arrayMaxPwr = singleModPwr*numPVmodules*numStrings
print('Array maximum power(W): {0:.2f} W'.format(arrayMaxPwr))
